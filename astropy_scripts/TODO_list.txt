# File for adding "general purpose" TODOs:

# TODO: seed all tests with random test (dummy) obs tables (or random bg cubes?) otherwise I get strange failures from time to time!!!!!! -> done
#       or use test file in gammapy-extra
#       test (dummy) bg cubes do not need it, since they are not random)
#       but test (dummy) datasets/eventlist do need it -> done

#TODO: I need to read runinfo.fits!!! (need to convert format)!!! (see below)

# in observation.py
#TODO:  check that I don't break anything because of missing tests in existing code!!! (i.e. in https://github.com/mapazarr/hess-host-analyses/blob/master/hgps_survey_map/hgps_survey_map.py#L62)

# in find_obs.py
# TODO: runinfo.fits col names need to be converted!!!
# TODO: 1st we need to check if the converter has to be applied at all?
#       solution: write a converter, but don't apply it. assume the format is the accepted one in gammapy. The user should use the converter to write a new file

# TODO: make find-obs par_box recursive!!!
#       allow multiple var selections!!! (read arrays/lists)

# TODO: check https://github.com/gammapy/gammapy/issues/315

# TODO: in gammapy/examples: plot_background_model.py -> plot_cube_background_model.py
#       and update names of vairables functions, inside the script
#      (and in the docs!!!!) ex. .. literalinclude:: ../../examples/plot_background_model.py in docs/background/models.rst


See also TODOs in test_filter_observations.py:

# TODO: test sky box selection of a box with lon on the range (0, 180) deg, with border 2 !!!!
# also (0, 10) deg, with border 2 !!!!
# also (0, 200) deg, with border 2 !!!!
# what is border for???!!!

# TODO: I'm testing on the elements that survive the selection, but not on the ones that fail!!!! -> ~done?
#       if for instance all elements are skipped because of a problem in the selection, then the test passes as good!!!
#       would testing on the inverted selection help??!!!
#       not completely: I can have the same problem!!!
#       on top of that, test that the sum of entries in both tables should be the total number of entries in the original table -> works, but is it enough?

# TODO: a really long selection (in find-obs), with many criteria


FAKE OBS:

- make a dummy obs table

- generate event lists according to the dummy obs table

- fake bg like in dummy bg model
  - add a dependency with zenith angle (what about azimuth, muon eff, n tels, ...?)
  - add this dependency/ies also into dummy bg model?

- add gaussian sources according to TeVCAT
  - take into account the extensions of the sources, and the fluxes, and the PSF
  - maybe gaussian is not the best model for extended sources: disk/ellipse with radius of the sources + PSF?

- for the bg cube models:
 - make it work so that no HESS data is necessary
 - make it work with few data (few alt-az bins?), so that the scripts run fast
 - if this works, maybe I don't need the DEBUG variable any more, since I won't need DEBUG > 1 !!!! (I can probably also remove the DEBUG > 2 calls, right?)
 -> TODO: what about IRFs (i.e. Aeff for the E_THRESH?)?!!! -> check: if they exist => use them, if not => use all events (no E_THRESH)


in make_bg_cube_model in fill_events:
 - with loop over runs + pick the columns I need instead of stack all events:
   - I reduce the time of the job by ~ 1/2 (5 min vs 10)
   - BUT I don't get nice printouts of progress bars (runs processed/total)
     TODO: print smthg every 10 runs or so!!!


tests TODO:

- CubeBackgroundModel write + read back !!! (for table and image formats)


List of PR TODOs in Cube class:

    - TODO: rename detx/dety to x/y!!! -> done
    - TODO: review this doc!!!
    - TODO: review this class!!! -> done?
    - TODO: review high-level doc!!!
    - TODO: what should I do with the bg units parser???!!! (and read/write methods)!!! -> done
    -       AND MAKE AN OPTION "UPDATE FILE" instead of overwrite!!! -> paso (he implementado read/write en CubeBackgroundModel)
    - TODO: is this class general enough to use it for other things
      besides bg cube models? (i.e. for projected bg cube models or
      spectral cubes?) -> ~done
    - TODO: read/write from/to file might need an optional argument
      to specify the name of the HDU -> paso de momento (ya lo hice anteriormente...) de momento funciona tal y como esta
    - TODO: update also (in datasets) make_test_bg_cube_model and test_make_test_bg_cube_model !!! -> done
    - TODO: think about the naming/definition/purpose of make_test_bg_cube_model (and the test file in gammapy-extra) !!! -> ~done
      probably I want to extend it to use the new bg cube model format (3 cubes) or, just leave it as is (and redefine naming/docs)??!!! -> paso
    - TODO: review background: make.py models.py -> ~done
    - TODO: review background tests: test_models test_cube (test_make)
    - TODO: revise imports of all files (also TEST files) at the end
    - TODO: revise examples in the string/high-level docs (i.e. for new member var 'scheme')
    - TODO: revise also example script!!! -> ~done
    - TODO: revise also indentation overall!!! (with renames, indentation might shift)!!!
    - TODO: use TeV for bin volume correction!!!
    - TODO from test_prod_bg_cube_models.py (my script): it would be
      nice to get a nice string from an obs group!!! and in this case
      pack it in the figure title; I think this also applies to the
      script for comparing plots!!! -> ~done

    list of (to) mod files:

    - gammapy/background/__init__.py
    - gammapy/background/make.py
    - gammapy/background/models.py
    - gammapy/background/tests/test_models.py
    - gammapy/datasets/make.py
    - gammapy/datasets/tests/test_make.py
    - gammapy/background/cube.py
    - gammapy/background/tests/test_cube.py
    - docs/background/plot_bgcube.py
    - examples/plot_background_model.py -> plot_bg_cube_model.py (update ref in docs!)
    - docs/background/models.rst
    - docs/background/make_models.rst
    - (...)


TODOs from dummy dataset generator (gammapy/datasets/make.py):

    # TODO: alternative to create a dummy obs table: pass an observation table, instead of generating one !!!
    #       i.e. read the obs table from gammapy-extra!!!
    # TODO: this function could be a class with 2 different methods to give the observations to the generator !!!
    # TODO: if ObservationTable could be a list of Observation objects, it would be easier to pass single observations to the event list generator

    # see also "FAKE OBS" ideas listed above

    # tests: add more tests (check the event lists and their contents)!!!
    #        also the obs list file!!!


for gammapy obs:
 TODO: reconcile OBSERVATORY_NAME = 'HESS' from ObservationTable with scheme = 'hess' from DataStore!!!
